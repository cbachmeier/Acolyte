/** * Module dependencies. */var express = require('express');var http    = require('http');var path    = require('path');var Shred   = require('shred');var shred   = new Shred();var app = express();// HashCachevar Datastore = require('nedb')  , db = new Datastore({ filename: 'hash.db', autoload: true });// Compact the databasedb.persistence.compactDataFile;// all environmentsapp.set('port', process.env.PORT || 3000);app.use(express.favicon());app.use(express.logger('dev'));app.use(express.json());app.use(express.urlencoded());app.use(express.methodOverride());app.use(express.cookieParser('your secret here'));app.use(express.session());app.use(express.static(path.join(__dirname, '../client')));// development onlyif ('development' == app.get('env')) {  app.use(express.errorHandler());}// Get a list of documents in the specified namespaceapp.get('/api/atelier/v1/:namespace', function(req,res) {    // Get the host from the header    host = req.get("X-Host")    // Form the url    theurl = "http://" + host + "/api/atelier/v1/" + encodeURIComponent(req.params.namespace) + "/docnames/CLS" + "?filter=" + encodeURIComponent(req.query.q);    console.log("Search: fetching: " + theurl);    shred.get({        url: theurl,        headers: {            Accept: "application/json",	        Authorization: "Basic X1NZU1RFTTpTWVM="        },        on: {            // You can use response codes as events            200: function(response) {                res.setHeader("Content-Type", response.headers["Content-Type"])                res.send(response.content.data);            },            // Any other response means something's wrong            response: function(response) {                res.send(response.status).send(response.content.data)            }        }    });});// Get the text of the named resourceapp.get('/api/atelier/v1/:namespace/:resource', function(req,res) {    // Get the host    host = req.get("X-Host")    // Form the url    theurl = "http://" + host + "/api/atelier/v1/" + encodeURIComponent(req.params.namespace) + "/doc/" + encodeURIComponent(req.params.resource);    console.log("Get: fetching: " + theurl);    shred.get({        url: theurl,        headers: {            Accept: "application/json",            Authorization: "Basic X1NZU1RFTTpTWVM="        },        on: {            // You can use response codes as events            200: function(response) {                var serverhash = response.headers["X-Serverhash"];                if (serverhash != undefined) {                    console.log("received server hash:" + serverhash);                    res.setHeader("X-Serverhash", serverhash);                    // Form doc record                    var doc = { host: host, ns: req.params.namespace, name: req.params.resource };                    // Upsert                    db.update(doc,{$set: {hash:serverhash}},{upsert:true},function(err,numReplaced) {                        if (err) {                            console.log(err);                        }                    });                }                res.setHeader("Content-Type", response.headers["Content-Type"])                res.send(response.content.data);                console.log(response.content.data);            },            // Any other response means something's wrong            response: function(response) {                res.send(response.status).send(response.content.data)            }        }    });});// Get the text of the named resourceapp.delete('/api/atelier/v1/:namespace/:resource', function(req,res) {    // Get the host    host = req.get("X-Host")    //buffer = req.body;    // Form the url    theurl = "http://" + host + "/api/atelier/v1/" + encodeURIComponent(req.params.namespace) + "/doc/" + encodeURIComponent(req.params.resource);    console.log("Delete: deleting: " + theurl);    // Get the server hash (might not know it)    //var doc = { host: host, ns: req.params.namespace, name: req.params.resource };    /*db.find(doc,function(err,docs) {        var clientserverhash = "";        if(err) {            console.log(err);        } else {            // If we have it            if (docs[0] != undefined) {                // Update the header                clientserverhash=docs[0].hash;                console.log("client server hash:" + clientserverhash);            }        }*/    console.log("Delete: sending: " + theurl);    shred.delete({        url: theurl,        headers: {            Accept: "application/json",            'Content-Type': "text/plain",            //'X-Serverhash': clientserverhash,            Authorization: "Basic X1NZU1RFTTpTWVM="        },        //content : buffer,        on: {            // You can use response codes as events            409: function(response) {                res.setHeader("Content-Type", response.headers["Content-Type"]);                res.setHeader("X-Serverhash",response.headers["X-Serverhash"]);                res.status(response.status);                x = JSON.stringify(response.content.data);                res.end(x);            },            // You can use response codes as events            response: function(response) {                /*                // Need to update server hash                var serverserverhash = response.headers["X-Serverhash"];                if (serverserverhash != undefined) {                    console.log("server server hash:" + serverserverhash);                    res.setHeader("X-Serverhash", serverserverhash);                    // Form doc record                    var doc = { host: host, ns: req.params.namespace, name: req.params.resource };                    // Upsert                    db.update(doc,{$set: {hash:serverserverhash}},{upsert:true},function(err,numReplaced) {                        if (err) {                            console.log(err);                        }                    });                }*/                console.log(response.content.data);                res.setHeader("Content-Type", response.headers["Content-Type"]);                res.status(response.status);                x = JSON.stringify(response.content.data);                res.end(x);            },        }        //});    });});// Push a named resource to the serverapp.put('/api/atelier/v1/:namespace/:resource', function(req,res) {    // Get the host    host = req.get("X-Host")    // Form the URL    if(req.params.resource.includes("?ignoreConflict=1")) {        req.params.resource = req.params.resource.split("?")[0];        theurl = "http://" + host + "/api/atelier/v1/" + encodeURIComponent(req.params.namespace) + "/doc/" + encodeURIComponent(req.params.resource);        theurl = theurl + "?ignoreConflict=1";    }else {        theurl = "http://" + host + "/api/atelier/v1/" + encodeURIComponent(req.params.namespace) + "/doc/" + encodeURIComponent(req.params.resource);    }    // Calculate the client hash    buffer = req.body;/*    req.on('data', function (data) {       buffer += data;    });*/    //req.on('end', function () {        // Get the server hash (might not know it)        var doc = { host: host, ns: req.params.namespace, name: req.params.resource };        db.find(doc,function(err,docs) {            if(err) {                console.log(err);            } else {                var clientserverhash = "";                // If we have it                if (docs[0] != undefined) {                    // Update the header                    clientserverhash=docs[0].hash;                    console.log("client server hash:" + clientserverhash);                } else {                }            }            console.log("Put: sending: " + theurl);            shred.put({                url: theurl,                headers: {                    Accept: "application/json",                    'Content-Type': "application/json",                    'X-Serverhash': clientserverhash,                    Authorization: "Basic X1NZU1RFTTpTWVM="                },                content: buffer,                on: {                    // You can use response codes as events                    409: function(response) {                        console.log(response.headers);                        res.setHeader("Content-Type", response.headers["Content-Type"]);                        res.setHeader("X-Serverhash",clientserverhash);                        res.status(response.status);                        x = JSON.stringify(response.content.data);                        res.end(x);                    },                    // You can use response codes as events                    response: function(response) {                        // Need to update server hash                        var serverserverhash = response.headers["X-Serverhash"];                                        if (serverserverhash != undefined) {                            console.log("server server hash:" + serverserverhash);                            res.setHeader("X-Serverhash", serverserverhash);                            // Form doc record                            var doc = { host: host, ns: req.params.namespace, name: req.params.resource };                            // Upsert                            db.update(doc,{$set: {hash:serverserverhash}},{upsert:true},function(err,numReplaced) {                                if (err) {                                    console.log(err);                                }                            });                        }                        console.log(response.content.data);                        res.setHeader("Content-Type", response.headers["Content-Type"]);                        res.status(response.status);                        x = JSON.stringify(response.content.data);                        res.end(x);                    },                }            });        });         //});});// Compile a resourceapp.post('/api/atelier/v1/:namespace/action/compile', function(req,res) {    // Get the host    host = req.get("X-Host")    // Form the URL    theurl = "http://" + host + "/api/atelier/v1/" + encodeURIComponent(req.params.namespace) +"/action/compile";    buffer = req.body;    console.log("POST: Compiling: "+ theurl);    shred.post({        url: theurl,        headers: {            Accept: "application/json",            // _SYSTEM:SYS            'Content-Type': "application/json",            Authorization: "Basic X1NZU1RFTTpTWVM="        },        content: buffer,        on: {            // You can use response codes as events            response: function(response) {                /*                // Need to update server hash                var serverserverhash = response.headers["X-Serverhash"];                        if (serverserverhash != undefined) {                    console.log("server server hash:" + serverserverhash);                    res.setHeader("X-Serverhash", serverserverhash);                    // Form doc record                    var doc = { host: host, ns: req.params.namespace, name: req.params.resource };                    // Upsert                    db.update(doc,{$set: {hash:serverserverhash}},{upsert:true},function(err,numReplaced) {                        if (err) {                            console.log(err);                        }                    });                }*/                                        console.log(response.content.data);                res.setHeader("Content-Type", response.headers["Content-Type"]);                res.status(response.status);                x = JSON.stringify(response.content.data);                res.end(x);            },        }    });});http.createServer(app).listen(app.get('port'), function(){  console.log('Express server listening on port ' + app.get('port'));});